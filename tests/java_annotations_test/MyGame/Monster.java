// automatically generated by the FlatBuffers compiler, do not modify

package MyGame;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Monster extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_2_0_0(); }
  public static Monster getRootAsMonster(ByteBuffer _bb) { return getRootAsMonster(_bb, new Monster()); }
  public static Monster getRootAsMonster(ByteBuffer _bb, Monster obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public Monster __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean gal() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public MyGame.Vec3 pos() { return pos(new MyGame.Vec3()); }
  public MyGame.Vec3 pos(MyGame.Vec3 obj) { int o = __offset(6); return o != 0 ? obj.__assign(o + bb_pos, bb) : null; }
  public byte pointsType() { int o = __offset(8); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public Table points(Table obj) { int o = __offset(10); return o != 0 ? __union(obj, o + bb_pos) : null; }
  public boolean friendly() { int o = __offset(12); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean noFriendly() { int o = __offset(14); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean ofir() { int o = __offset(16); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public byte color() { int o = __offset(18); return o != 0 ? bb.get(o + bb_pos) : 3; }

  public static void startMonster(FlatBufferBuilder builder) { builder.startTable(8); }
  public static void addGal(FlatBufferBuilder builder, boolean gal) { builder.addBoolean(0, gal, false); }
  public static void addPos(FlatBufferBuilder builder, int posOffset) { builder.addStruct(1, posOffset, 0); }
  public static void addPointsType(FlatBufferBuilder builder, byte pointsType) { builder.addByte(2, pointsType, 0); }
  public static void addPoints(FlatBufferBuilder builder, int pointsOffset) { builder.addOffset(3, pointsOffset, 0); }
  public static void addFriendly(FlatBufferBuilder builder, boolean friendly) { builder.addBoolean(4, friendly, false); }
  public static void addNoFriendly(FlatBufferBuilder builder, boolean noFriendly) { builder.addBoolean(5, noFriendly, false); }
  public static void addOfir(FlatBufferBuilder builder, boolean ofir) { builder.addBoolean(6, ofir, false); }
  public static void addColor(FlatBufferBuilder builder, byte color) { builder.addByte(7, color, 3); }
  public static int endMonster(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishMonsterBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedMonsterBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public Monster get(int j) { return get(new Monster(), j); }
    public Monster get(Monster obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
  public MonsterT unpack() {
    MonsterT _o = new MonsterT();
    unpackTo(_o);
    return _o;
  }
  public void unpackTo(MonsterT _o) {
    boolean _oGal = gal();
    _o.setGal(_oGal);
    if (pos() != null) pos().unpackTo(_o.getPos());
    else _o.setPos(null);
    MyGame.PointsUnion _oPoints = new MyGame.PointsUnion();
    byte _oPointsType = pointsType();
    _oPoints.setType(_oPointsType);
    Table _oPointsValue;
    switch (_oPointsType) {
      case MyGame.Points.PointOne:
        _oPointsValue = points(new MyGame.PointOne());
        _oPoints.setValue(_oPointsValue != null ? ((MyGame.PointOne) _oPointsValue).unpack() : null);
        break;
      case MyGame.Points.PointTwo:
        _oPointsValue = points(new MyGame.PointTwo());
        _oPoints.setValue(_oPointsValue != null ? ((MyGame.PointTwo) _oPointsValue).unpack() : null);
        break;
      default: break;
    }
    _o.setPoints(_oPoints);
    boolean _oFriendly = friendly();
    _o.setFriendly(_oFriendly);
    boolean _oNoFriendly = noFriendly();
    _o.setNoFriendly(_oNoFriendly);
    boolean _oOfir = ofir();
    _o.setOfir(_oOfir);
    byte _oColor = color();
    _o.setColor(_oColor);
  }
  public static int pack(FlatBufferBuilder builder, MonsterT _o) {
    if (_o == null) return 0;
    byte _pointsType = _o.getPoints() == null ? MyGame.Points.NONE : _o.getPoints().getType();
    int _points = _o.getPoints() == null ? 0 : MyGame.PointsUnion.pack(builder, _o.getPoints());
    startMonster(builder);
    addGal(builder, _o.getGal());
    addPos(builder, MyGame.Vec3.pack(builder, _o.getPos()));
    addPointsType(builder, _pointsType);
    addPoints(builder, _points);
    addFriendly(builder, _o.getFriendly());
    addNoFriendly(builder, _o.getNoFriendly());
    addOfir(builder, _o.getOfir());
    addColor(builder, _o.getColor());
    return endMonster(builder);
  }
}


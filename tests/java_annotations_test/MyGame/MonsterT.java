// automatically generated by the FlatBuffers compiler, do not modify

package MyGame;

import com.cohen.tom;
import com.moses.ofir;
import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@Ofir("monster")
public class MonsterT {
  private boolean gal;
 @Ofir("15")
  private MyGame.Vec3T pos;
  private MyGame.PointsUnion points;
 @Ofir("1")
  private boolean friendly;
  private boolean noFriendly;
 @Tom("10")
  private boolean ofir;
  private byte color;

  public boolean getGal() { return gal; }

  public void setGal(boolean gal) { this.gal = gal; }

  public MyGame.Vec3T getPos() { return pos; }

  public void setPos(MyGame.Vec3T pos) { this.pos = pos; }

  public MyGame.PointsUnion getPoints() { return points; }

  public void setPoints(MyGame.PointsUnion points) { this.points = points; }

  public boolean getFriendly() { return friendly; }

  public void setFriendly(boolean friendly) { this.friendly = friendly; }

  public boolean getNoFriendly() { return noFriendly; }

  public void setNoFriendly(boolean noFriendly) { this.noFriendly = noFriendly; }

  public boolean getOfir() { return ofir; }

  public void setOfir(boolean ofir) { this.ofir = ofir; }

  public byte getColor() { return color; }

  public void setColor(byte color) { this.color = color; }


  public MonsterT() {
    this.gal = false;
    this.pos = new MyGame.Vec3T();
    this.points = null;
    this.friendly = false;
    this.noFriendly = false;
    this.ofir = false;
    this.color = 3;
  }
  public static MonsterT deserializeFromBinary(byte[] fbBuffer) {
    return Monster.getRootAsMonster(ByteBuffer.wrap(fbBuffer)).unpack();
  }
  public byte[] serializeToBinary() {
    FlatBufferBuilder fbb = new FlatBufferBuilder();
    Monster.finishMonsterBuffer(fbb, Monster.pack(fbb, this));
    return fbb.sizedByteArray();
  }
}

